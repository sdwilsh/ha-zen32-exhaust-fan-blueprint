---
#
# Blueprint Metadata
#
blueprint:
  name: Zooz ZEN32 Fan Scene Controller
  description: >-
    Treats the buttons at 10m, 20m, 30m, 45m, and 60m to controll a fan.
  domain: automation
  input:
    scene_controller:
      name: Zooz ZEN32 Scene Controller
      description: >-
        The Zooz Zen32 Scene Controller that will controll the fan's state
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
          model: ZEN32
          multiple: false
    fan_switch:
      name: Fan Switch Entity
      description: Switch Entity to toggle the exhause fan
      selector:
        entity:
          domain: switch
          multiple: false
    fan_timer:
      name: Fan Timer Entity
      description: The helper timer associated with the fan.
      selector:
        entity:
          domain: timer
          multiple: false

#
# Variables
#
variables:
  fan_switch: !input fan_switch
  fan_timer: !input fan_timer
  scene_controller: !input scene_controller

#
# Triggers
#
trigger:
  #
  # Button Triggers
  #
  - platform: event # Top-left Small Button
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input scene_controller
      property: scene
      property_key: "001"
    id: zwave_scene_10m
  - platform: event # Top-right Small Button
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input scene_controller
      property: scene
      property_key: "002"
    id: zwave_scene_20m
  - platform: event # Bottom-left Small Button
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input scene_controller
      property: scene
      property_key: "003"
    id: zwave_scene_30m
  - platform: event # Bottom-right Small Button
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input scene_controller
      property: scene
      property_key: "004"
    id: zwave_scene_45m
  - platform: event # Big Button
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input scene_controller
      property: scene
      property_key: "005"
    id: zwave_scene_60m

  #
  # Timer Triggers
  #
  - platform: event # Timer Finished
    event_type: timer.finished
    id: timer_finished
    event_data:
      entity_id: !input fan_timer
  - platform: state # Timer Changed
    entity_id: !input fan_timer
    attribute: finishes_at
    id: timer_changed

  #
  # Device State Triggers
  #
  - platform: device # Turned Off
    type: turned_off
    device_id: !input scene_controller
    entity_id: !input fan_switch
    id: turned_off
    domain: switch
  - platform: device # Turned On
    type: turned_on
    device_id: !input scene_controller
    entity_id: !input fan_switch
    id: turned_on
    domain: switch

  #
  # State Event Triggers
  #
  - platform: event # UNKNOWN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: UNKNOWN
    id: state_UNKNOWN
  - platform: event # OFF
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: "OFF"
    id: state_OFF
  - platform: event # ON_NO_TIME
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_NO_TIME
    id: state_ON_NO_TIME
  - platform: event # ON_GT_45_MIN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_GT_45_MIN
    id: state_ON_GT_45_MIN
  - platform: event # ON_GT_30_LTE_45_MIN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_GT_30_LTE_45_MIN
    id: state_ON_GT_30_LTE_45_MIN
  - platform: event # ON_GT_20_LTE_30_MIN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_GT_20_LTE_30_MIN
    id: state_ON_GT_20_LTE_30_MIN
  - platform: event # ON_GT_10_LTE_20_MIN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_GT_10_LTE_20_MIN
    id: state_ON_GT_10_LTE_20_MIN
  - platform: event # ON_LTE_10_MIN
    event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
    event_data:
      scene_controller: !input scene_controller
      fan_switch: !input fan_switch
      fan_timer: !input fan_timer
      new_state: ON_LTE_10_MIN
    id: state_ON_LTE_10_MIN

#
# Actions
#
action:
  - if: # Event Logging
      - condition: template
        value_template: >-
          {{ trigger.platform == 'event' and trigger.event.event_type ==
          'ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE' }}
    then:
      - service: system_log.write
        data_template:
          level: debug
          logger: zen32_exhaust_fan_blueprint
          message: >-
            "Entered state {{ trigger.event.data.new_state }} for {{ fan_switch
            }} with scene controller {{ scene_controller }}."

  - choose:
      #
      # Event-based Actions
      #

      - conditions: # State: UNKNOWN
          - condition: trigger
            id: state_UNKNOWN
        sequence:
          - choose:
              - conditions: # Remaining > 45m
                  - condition: template
                    value_template: >-
                      {% set remaining =
                      timedelta(seconds=(as_timestamp(state_attr(fan_timer,
                      'finishes_at')) - as_timestamp(now())) | int) %}{{
                      remaining > timedelta(minutes=45) }}
                sequence:
                  - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                    event_data:
                      scene_controller: !input scene_controller
                      fan_switch: !input fan_switch
                      fan_timer: !input fan_timer
                      new_state: ON_GT_45_MIN
              - conditions: # Remaining > 30m, <= 45m
                  - condition: template
                    value_template: >-
                      {% set remaining =
                      timedelta(seconds=(as_timestamp(state_attr(fan_timer,
                      'finishes_at')) - as_timestamp(now())) | int) %}{{
                      remaining > timedelta(minutes=30) and remaining <=
                      timedelta(minutes=45) }}
                sequence:
                  - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                    event_data:
                      scene_controller: !input scene_controller
                      fan_switch: !input fan_switch
                      fan_timer: !input fan_timer
                      new_state: ON_GT_30_LTE_45_MIN
              - conditions: # Remaining > 20m, <= 30m
                  - condition: template
                    value_template: >-
                      {% set remaining =
                      timedelta(seconds=(as_timestamp(state_attr(fan_timer,
                      'finishes_at')) - as_timestamp(now())) | int) %}{{
                      remaining > timedelta(minutes=20) and remaining <=
                      timedelta(minutes=30) }}
                sequence:
                  - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                    event_data:
                      scene_controller: !input scene_controller
                      fan_switch: !input fan_switch
                      fan_timer: !input fan_timer
                      new_state: ON_GT_20_LTE_30_MIN
              - conditions: # Remaining > 10m, <= 20m
                  - condition: template
                    value_template: >-
                      {% set remaining =
                      timedelta(seconds=(as_timestamp(state_attr(fan_timer,
                      'finishes_at')) - as_timestamp(now())) | int) %}{{
                      remaining > timedelta(minutes=10) and remaining <=
                      timedelta(minutes=20) }}
                sequence:
                  - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                    event_data:
                      scene_controller: !input scene_controller
                      fan_switch: !input fan_switch
                      fan_timer: !input fan_timer
                      new_state: ON_GT_10_LTE_20_MIN
              - conditions: # Remaining <= 10m
                  - condition: template
                    value_template: >-
                      {% set remaining =
                      timedelta(seconds=(as_timestamp(state_attr(fan_timer,
                      'finishes_at')) - as_timestamp(now())) | int) %}{{
                      remaining <= timedelta(minutes=10) }}
                sequence:
                  - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                    event_data:
                      scene_controller: !input scene_controller
                      fan_switch: !input fan_switch
                      fan_timer: !input fan_timer
                      new_state: ON_LTE_10_MIN
            default:
              - service: system_log.write
                data_template:
                  level: error
                  logger: zen32_exhaust_fan_blueprint
                  message: >-
                    "Unable to compute proper state for {{ trigger.id }} for {{
                    fan_switch }} with scene controller {{ scene_controller }}."
      - conditions: # State: OFF
          - condition: trigger
            id: state_OFF
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 0 # On when load is off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "6" # Big Button LED Color
              value: 1 # Blue
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "on"
            then:
              - service: switch.turn_off
                target:
                  entity_id: !input fan_switch
                data: {}
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: active
            then:
              - service: timer.cancel
                target:
                  entity_id: !input fan_timer
                data: {}
      - conditions: # State: ON_NO_TIME
          - condition: trigger
            id: state_ON_NO_TIME
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "6" # Big Button LED Color
              value: 2 # Green
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: active
            then:
              - service: timer.cancel
                target:
                  entity_id: !input fan_timer
                data: {}
      - conditions: # State: ON_GT_45_MIN
          - condition: trigger
            id: state_ON_GT_45_MIN
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "6" # Big Button LED Color
              value: 0 # White
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - delay:
              seconds: >-
                {{ (as_timestamp(as_datetime(state_attr(fan_timer,
                'finishes_at')) - timedelta(minutes=45)) - as_timestamp(now()))
                | int }}
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: ON_GT_30_LTE_45_MIN
      - conditions: # State: ON_GT_30_LTE_45_MIN
          - condition: trigger
            id: state_ON_GT_30_LTE_45_MIN
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 0 # On when load is off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - delay:
              seconds: >-
                {{ (as_timestamp(as_datetime(state_attr(fan_timer,
                'finishes_at')) - timedelta(minutes=30)) -
                as_timestamp(now())) | int }}
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: ON_GT_20_LTE_30_MIN
      - conditions: # State: ON_GT_20_LTE_30_MIN
          - condition: trigger
            id: state_ON_GT_20_LTE_30_MIN
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 0 # On when load is off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - delay:
              seconds: >-
                {{ (as_timestamp(as_datetime(state_attr(fan_timer,
                'finishes_at')) - timedelta(minutes=20)) -
                as_timestamp(now())) | int }}
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: ON_GT_10_LTE_20_MIN
      - conditions: # State: ON_GT_10_LTE_20_MIN
          - condition: trigger
            id: state_ON_GT_10_LTE_20_MIN
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 0 # On when load is off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - delay:
              seconds: >-
                {{ (as_timestamp(as_datetime(state_attr(fan_timer,
                'finishes_at')) - timedelta(minutes=10)) -
                as_timestamp(now())) | int }}
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: ON_LTE_10_MIN
      - conditions: # State: ON_LTE_10_MIN
          - condition: trigger
            id: state_ON_LTE_10_MIN
        sequence:
          - service: zwave_js.set_config_parameter
            data:
              parameter: "1" # Big Button
              value: 0 # On when load is off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "2" # Small Top-Left Button
              value: 3 # Always on
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "3" # Small Top-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "4" # Small Bottom-Left Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - service: zwave_js.set_config_parameter
            data:
              parameter: "5" # Small Bottom-Right Button
              value: 2 # Always off
            target:
              device_id: !input scene_controller
          - if:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
            then:
              - service: switch.turn_on
                target:
                  entity_id: !input fan_switch
                data: {}
          - delay:
              seconds: >-
                {{ (as_timestamp(state_attr(fan_timer, 'finishes_at'))
                - as_timestamp(now())) | int }}
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: "OFF"

      #
      # Scene Actions
      #

      - conditions: # 60m Button Pressed
          - condition: trigger
            id: zwave_scene_60m
        sequence:
          - if:
              - condition: device
                type: is_on
                device_id: !input scene_controller
                entity_id: !input fan_switch
                domain: switch
            then:
              service: timer.start
              data:
                duration: "1:00:00"
              target:
                entity_id: !input fan_timer
          - if:
              - condition: device
                type: is_off
                device_id: !input scene_controller
                entity_id: !input fan_switch
                domain: switch
            then:
              event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
              event_data:
                scene_controller: !input scene_controller
                fan_switch: !input fan_switch
                fan_timer: !input fan_timer
                new_state: "OFF"
      - conditions: # 45m Button Pressed
          - condition: trigger
            id: zwave_scene_45m
        sequence:
          - service: timer.start
            data:
              duration: 0:45:00
            target:
              entity_id: !input fan_timer
      - conditions: # 30m Button Pressed
          - condition: trigger
            id: zwave_scene_30m
        sequence:
          - service: timer.start
            data:
              duration: 0:30:00
            target:
              entity_id: !input fan_timer
      - conditions: # 20m Button Pressed
          - condition: trigger
            id: zwave_scene_20m
        sequence:
          - service: timer.start
            data:
              duration: 0:20:00
            target:
              entity_id: !input fan_timer
      - conditions: # 10m Button Pressed
          - condition: trigger
            id: zwave_scene_10m
        sequence:
          - service: timer.start
            data:
              duration: 0:10:00
            target:
              entity_id: !input fan_timer

      #
      # Timer State
      #

      - conditions: # Timer Completed
          - condition: trigger
            id: timer_finished
        sequence:
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: "OFF"
      - conditions: # Timer Changed
          - condition: trigger
            id: timer_changed
        sequence:
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: active
            then:
              - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                event_data:
                  scene_controller: !input scene_controller
                  fan_switch: !input fan_switch
                  fan_timer: !input fan_timer
                  new_state: UNKNOWN
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: idle
            then:
              - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                event_data:
                  scene_controller: !input scene_controller
                  fan_switch: !input fan_switch
                  fan_timer: !input fan_timer
                  new_state: "OFF"

      #
      # Device State
      #

      - conditions: # Turned Off
          - condition: trigger
            id: turned_off
        sequence:
          - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
            event_data:
              scene_controller: !input scene_controller
              fan_switch: !input fan_switch
              fan_timer: !input fan_timer
              new_state: "OFF"
      - conditions: # Turned On
          - condition: trigger
            id: turned_on
        sequence:
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: idle
            then:
              - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                event_data:
                  scene_controller: !input scene_controller
                  fan_switch: !input fan_switch
                  fan_timer: !input fan_timer
                  new_state: ON_NO_TIME
          - if:
              - condition: state
                entity_id: !input fan_timer
                state: active
            then:
              # Timer was active, so need to compute what state we should be in.
              - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
                event_data:
                  scene_controller: !input scene_controller
                  fan_switch: !input fan_switch
                  fan_timer: !input fan_timer
                  new_state: UNKNOWN

    default:
      - service: system_log.write
        data_template:
          level: error
          logger: zen32_exhaust_fan_blueprint
          message: >-
            "Unexpected default for trigger {{ trigger.id }} for {{ fan_switch
            }} with scene controller {{ scene_controller }}."

#
# Mode
#
mode: restart
